# This file is the entry point to configure your own services.0780
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    no_reply: 'contact@symshop.com'
    no_reply_name: 'symshop'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Stripe\StripeService:
        arguments: ['%env(STRIPE_PUBLIC_KEY)%',
                    '%env(STRIPE_SECRET_KEY)%']
    Cocur\Slugify\Slugify:

    App\Doctrine\Listener\ProductSlugListener:
        tags: [{ name: "doctrine.orm.entity_listener",event: prePersist,entity: App\Entity\Product }]
    App\Doctrine\Listener\CategorySlugListener:
        tags: [{ name: "doctrine.orm.entity_listener",event: prePersist,entity: App\Entity\Category }]
#        tags: [{ name: doctrine.orm.listener,event: prePersist}] ==> cela impplique qu'on appel ce listener tous le temps probleme de performance surtout si cela cible 1 entity en particulier
#    Peut etre remplacer par getSubscribedEvents dans la classse subscriber creer  de  interface de 'EventSubscriberInterface'
#    App\eventDispatcher\prenomListener:
#        tags: [
#            {name: kernel.event_listener,
#             event: kernel.request,
#             method: addPrenomToAttribute}
#            { name : kernel.event_listener,
#              event : kernel.controller,
#              method : test1 },
#            { name : kernel.event_listener,
#              event : kernel.controller_arguments,
#              method : test2 },
#        ]